
MIPS Instruction Set Architecture

---------------------<reserved registers>------------------------
$0                   zero
$1                   assembler temporary
$29                  stack pointer
$31                  return address

aluCont = {add:00, subtract:01, func:10, opcode:11}

---------------------<R-type Instructions>-----------------------
R-type format:
	[opcode] [regs ] [regt ] [regd ] [shift] [ func ]
	[   6  ] [  5  ] [  5  ] [  5  ] [  5  ] [   6  ]
	[31-26 ] [25-21] [20-16] [15-11] [10-6 ] [  5-0 ]


ADDU   $rd,$rs,$rt   R[rd] <= R[rs] + R[rt] (unchecked overflow)
	[000000] [sssss] [ttttt] [ddddd] [00000] [100001]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_ADD
		aluCont = 10
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

ADD    $rd,$rs,$rt   R[rd] <= R[rs] + R[rt]
	[000000] [sssss] [ttttt] [ddddd] [00000] [100000]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_ADD
		aluCont = 10
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

AND    $rd,$rs,$rt   R[rd] <= R[rs] AND R[rt]
	[000000] [sssss] [ttttt] [ddddd] [00000] [100100]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_AND
		aluCont = 10
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

JR     $rs           PC <= R[rs]
	[000000] [sssss] [00000] [00000] [00000] [001000]
		RegDst = X
		Branch = X
		WEN = 0
		ALUSrc = X
		MemtoReg = X
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = XXXX
		aluCont = 11 or XX
		jmpReg = 1
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

NOR    $rd,$rs,$rt   R[rd] <= ~(R[rs] OR R[rt])
	[000000] [sssss] [ttttt] [ddddd] [00000] [100111]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_NOR
		aluCont = 10
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0


OR     $rd,$rs,$rt   R[rd] <= R[rs] OR R[rt]
	[000000] [sssss] [ttttt] [ddddd] [00000] [100101]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_OR
		aluCont = 10
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0


SLT    $rd,$rs,$rt   R[rd] <= (R[rs] < R[rt]) ? 1 : 0
	[000000] [sssss] [ttttt] [ddddd] [00000] [101010]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_SLT
		aluCont = 10
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

SLTU   $rd,$rs,$rt   R[rd] <= (R[rs] < R[rt]) ? 1 : 0
	[000000] [sssss] [ttttt] [ddddd] [00000] [101011]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_SLT
		aluCont = 10
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

SLL    $rd,$rs,shamt R[rd] <= R[rs] << shamt
	[000000] [sssss] [00000] [ddddd] [hhhhh] [000000]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = X
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_SLL
		aluCont = 10
		jmpReg = 0
		shiftSel = 1
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

SRL    $rd,$rs,shamt R[rd] <= R[rs] >> shamt
	[000000] [sssss] [00000] [ddddd] [hhhhh] [000010]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = X
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_SRL
		aluCont = 10
		jmpReg = 0
		shiftSel = 1
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

SUBU   $rd,$rs,$rt   R[rd] <= R[rs] - R[rt] (unchecked overflow)
	[000000] [sssss] [ttttt] [ddddd] [00000] [100011]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_SUB
		aluCont = 10
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

SUB    $rd,$rs,$rt   R[rd] <= R[rs] - R[rt]
	[000000] [sssss] [ttttt] [ddddd] [00000] [100010]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_SUB
		aluCont = 10
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

XOR    $rd,$rs,$rt   R[rd] <= R[rs] XOR R[rt]
	[000000] [sssss] [ttttt] [ddddd] [00000] [100110]
		RegDst = 1
		Branch = 0
		WEN = 1
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_XOR
		aluCont = 10
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0


---------------------<I-type Instructions>-----------------------
I-type format:
	[opcode] [regs ] [regt ] [    immediate   ]
	[   6  ] [  5  ] [  5  ] [       16       ]
	[31-26 ] [25-21] [20-16] [      15-0      ]

ADDIU  $rt,$rs,imm   R[rt] <= R[rs] + SignExtImm (unchecked overflow)
	[001001] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = 1
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_ADD
		aluCont = 11
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

ADDI   $rt,$rs,imm   R[rt] <= R[rs] + SignExtImm
	[001000] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = 1
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_ADD
		aluCont = 11
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

ANDI   $rt,$rs,imm   R[rt] <= R[rs] & ZeroExtImm
	[001100] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = 1
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_AND
		aluCont = 11
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

BEQ    $rs,$rt,label PC <= (R[rs] == R[rt]) ? npc+BranchAddr : npc
	[000100] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = X
		Branch = 1
		WEN = 0
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN = 0
		imemREN = 1
		ALUOp = ALU_SUB
		aluCont = 01
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

BNE    $rs,$rt,label PC <= (R[rs] != R[rt]) ? npc+BranchAddr : npc
	[000101] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = X
		Branch = 1
		WEN = 0
		ALUSrc = 0
		MemtoReg = 0
		dREN = 0
		dWEN = 0
		imemREN = 1
		ALUOp = ALU_SUB
		aluCont = 01
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 1
		zeroExt = 0
		lui = 0

LUI    $rt,imm       R[rt] <= {imm,16b'0}		-- TODO
	[001111] [00000] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = X
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = X
		aluCont = X
		jmpReg = 0
		shiftSel = X
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = X
		lui = 1

LW     $rt,imm($rs)  R[rt] <= M[R[rs] + SignExtImm]
	[100011] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = 1
		MemtoReg = 1
		dREN = 1
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_ADD
		aluCont = 00
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

ORI    $rt,$rs,imm   R[rt] <= R[rs] OR ZeroExtImm
	[001101] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = 1
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_OR
		aluCont = 11
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 1
		lui = 0

SLTI   $rt,$rs,imm   R[rt] <= (R[rs] < SignExtImm) ? 1 : 0
	[001010] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = 1
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_SLT
		aluCont = 11
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

SLTIU  $rt,$rs,imm   R[rt] <= (R[rs] < SignExtImm) ? 1 : 0
	[001011] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = 1
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_SLTU
		aluCont = 11
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

SW     $rt,imm($rs)  M[R[rs] + SignExtImm] <= R[rt]
	[101011] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = 1
		MemtoReg = X
		dREN = 0
		dWEN =  1
		imemREN = 1
		ALUOp = ALU_ADD
		aluCont = 00
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

LL     $rt,imm($rs)  R[rt] <= M[R[rs] + SignExtImm]; rmwstate <= addr     ----- TODO: UPDATE WITH ACTUAL LL
	[110000] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = 1
		MemtoReg = 1
		dREN = 1
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_ADD
		aluCont = 00
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

SC     $rt,imm($rs)  if (rmw) M[R[rs] + SignExtImm] <= R[rt], R[rt] <= 1 else R[rt] <= 0     ----- TODO: UPDATE WITH ACTUAL LL
	[111000] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = 1
		MemtoReg = X
		dREN = 0
		dWEN =  1
		imemREN = 1
		ALUOp = ALU_ADD
		aluCont = 00
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

XORI   $rt,$rs,imm   R[rt] <= R[rs] XOR ZeroExtImm
	[000000] [sssss] [ttttt] [iiiiiiiiiiiiiiii]
		RegDst = 0
		Branch = 0
		WEN = 1
		ALUSrc = 1
		MemtoReg = 0
		dREN = 0
		dWEN =  0
		imemREN = 1
		ALUOp = ALU_XOR
		aluCont = 11
		jmpReg = 0
		shiftSel = 0
		jmp = 0
		jl = 0
		bne = 0
		zeroExt = 1
		lui = 0


---------------------<J-type Instructions>-----------------------
J-type format:
	[opcode] [         target           ]
	[   6  ] [           26             ]
	[31-26 ] [          25-0            ]

J      label         PC <= JumpAddr
	[000010] [iiiiiiiiiiiiiiiiiiiiiiiiii]
		RegDst = X
		Branch = X
		WEN = 0
		ALUSrc = X
		MemtoReg = X
		dREN = 0
		dWEN = 0
		imemREN = 1
		ALUOp = X
		aluCont = X
		jmpReg = X
		shiftSel = X
		jmp = 1
		jl = 0
		bne = 0
		zeroExt = 0
		lui = 0

JAL    label         R[31] <= npc; PC <= JumpAddr
	[000011] [iiiiiiiiiiiiiiiiiiiiiiiiii]
		RegDst = X
		Branch = X
		WEN = 1
		ALUSrc = X
		MemtoReg = X
		dREN = 0
		dWEN = 0
		imemREN = 1
		ALUOp = X
		aluCont = X
		jmpReg = X
		shiftSel = X 
		jmp = 1
		jl = 1
		bne = 0
		zeroExt = 0
		lui = 0


---------------------<Other Instructions>------------------------
HALT

---------------------<Pseudo Instructions>-----------------------
PUSH   $rs           $29 <= $29 - 4; Mem[$29+0] <= R[rs] (sub+sw)
POP    $rt           R[rt] <= Mem[$29+0]; $29 <= $29 + 4 (add+lw)
NOP                  Nop

-----------------------------------------------------------------
-----------------------------------------------------------------
org  Addr         Set the base address for the code to follow 
chw  #            Assign value to half word memory
cfw  #            Assign value to word of memory
